---
# Setup Windows user directories

- name: Symlinking WSL User Directories To Windows
  win_shell: |
      New-Item -ItemType SymbolicLink -Path "{{ item.name }}" -Target "{{ my_facts.wsl_unc_home_dir }}\\{{ item.name }}"
  args:
    chdir: "{{ my_user.userprofile }}"
    creates: "{{ my_user.userprofile }}\\{{ item.name }}"
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('link', 'defined') | selectattr('link', 'equalto', 'windows') }}"
  when:
    - my_facts.is_wsl
    - not my_facts.wsl_home_is_userprofile

# Rename directories to same case as listed in user_directories (OCD).
# NOTE: This task should run even if USERPROFILE is WSL ~ as dirs.yml doesn't
# handle this (Linux is case 
- name: Fixing Existing Directories Case
  win_shell: |
    $changed = 0
    $dir = Dir | Where-Object { ($_.Name -eq "{{ item.name }}") -and -not ($_.Name -ceq "{{ item.name }}") }
    foreach ($d in $dir) {
        Rename-Item $d.FullName ($d.Name + ".rename")
        Rename-Item ($d.FullName + ".rename") ($d.Name.ToLower())
        $changed += 1
    }
    Write-Host $changed
  args:
    chdir: "{{ my_user.userprofile }}"
  register: result
  changed_when: result.stdout | int > 0
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs }}"

- name: Creating User Directories
  # TODO: Support for nested directories, when creating directory must check
  # and proceed only if no component of path is already existing symlink.
  #win_shell:
  win_file:
    path: "{{ my_user.userprofile }}\\{{ item.name }}"
    state: directory
  args:
    chdir: "{{ my_user.userprofile }}"
  loop_control:
    label: "{{ item.name }}"
  with_items: 
    - "{{ user_dirs | rejectattr('link', 'defined') }}"
    - "{{ user_dirs | selectattr('link', 'defined') | rejectattr('link', 'equalto', 'windows') }}"

- name: Relocating User Shell Folders
  xwin_shell_folder:
    guid: "{{ item.windows_guid }}"
    path: "%USERPROFILE%\\{{ item.name }}"
    move_files: true
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('windows_guid', 'defined') }}"

# NOTE: NOT using dirs.yml here as this is specific to Windows only.
# TODO: Move various garbage like 'My Documents', 'Favorites', etc. to one
# directory... 

- name: Adding desktop.ini
  # NOTE: desktop.ini MUST be moved using Shell method to be picked up
  win_shell: |
      $content = @"

      [.ShellClassInfo]
      IconResource={{ item.windows_icon }}
      "@
      Set-Content "{{ my_user.userprofile }}\\{{ item.name }}\\desktop.ini" $content -Encoding Unicode -Force
      # Required by explorer.exe to pick up desktop.ini
      (Get-Item "{{ my_user.userprofile }}\\{{ item.name }}" -Force).Attributes = "Readonly","Directory"
      (Get-Item "{{ my_user.userprofile }}\\{{ item.name }}\\desktop.ini" -Force).Attributes = "Archive","Hidden","System"
      # TODO: Broadcast change message
  args:
    chdir: "{{ my_user.userprofile }}"
    creates: "{{ my_user.userprofile }}\\{{ item.name }}\\desktop.ini"
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('windows_icon', 'defined') }}"

- name: Deleting Unwanted Directories
  win_file:
    path: "{{ my_user.userprofile }}\\{{ item }}"
    state: absent
  # NOTE: Some directories might be protected by Windows, skip those.
  ignore_errors: true
  with_items:
    - "Contacts"      # ???
    - "Favorites"     # ???
    - "Links"         # ???
    - "OneDrive"
    - "ansel"         # Nvidia
    - "source"        # Visual Studio
    #- "Creative Cloud"
