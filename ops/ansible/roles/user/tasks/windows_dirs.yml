---
# Setup Windows user directories

- name: Symlinking WSL User Directories To Windows
  win_shell: |
      New-Item -ItemType SymbolicLink -Path "{{ item.name }}" -Target "{{ my_facts.wsl_unc_home_dir }}\\{{ item.name }}"
  args:
    chdir: "{{ my_user.userprofile }}"
    creates: "{{ my_user.userprofile }}\\{{ item.name }}"
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('link', 'defined') | selectattr('link', 'equalto', 'windows') }}"
  when:
    - my_facts.is_wsl
    - not my_facts.wsl_home_is_userprofile

# Rename directories to same case as listed in user_directories (OCD).
# NOTE: This task should run even if USERPROFILE is WSL ~ as dirs.yml doesn't
# handle this (Linux is case sensitive)
- name: Fixing Existing Directories Case
  win_shell: |
    $changed = 0
    $dir = Dir | Where-Object { ($_.Name -eq "{{ item.name }}") -and -not ($_.Name -ceq "{{ item.name }}") }
    foreach ($d in $dir) {
        Rename-Item $d.FullName ($d.Name + ".rename")
        Rename-Item ($d.FullName + ".rename") ($d.Name.ToLower())
        $changed += 1
    }
    Write-Host $changed
  args:
    chdir: "{{ my_user.userprofile }}"
  register: result
  changed_when: result.stdout | int > 0
  loop_control:
    label: "{{ item.name }}"
  with_items:
    - "{{ user_dirs }}"

- set_fact:
  # NOTE: Helper to filter directories and keep them in order
    user_dirs_filtered: "{{ user_dirs_filtered | default([]) + ([item] if ((('link' not in item) or (item['link'] != 'windows')) and (('os' not in item) or (item['os'] == 'windows'))) else []) }}"
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ user_dirs }}"
- name: Creating User Directories
  # NOTE: Can't use win_file because we need to check if directory is nested
  # under symlink (WSL<->Windows linking).
  win_shell: |
    $name = $("{{ item.name }}".Replace("/", "\"))

    # Check if any component of path is symlink
    $has_link = $false
    $test_path = "{{ my_user.userprofile }}"
    foreach($p in @($name.Split("\"))) {
      $test_path += "\$p"
      $t = Get-Item -Path $test_path -Force -ErrorAction SilentlyContinue
      $has_link = ([bool]($t.Attributes -band [IO.FileAttributes]::ReparsePoint))
      if ($has_link) {
        Write-Error "$test_path is symlink, not creating {{ item.name }}"
        break
      }
    }
    # Create directory
    $path = "{{ my_user.userprofile }}\$name"
    $changed = 0
    if (-not($has_link) -and -not(Test-Path -Path $path)) {
      $r = New-Item -Path $path -ItemType Directory
      $changed = 1
    }

    Write-Host $changed
  register: result
  changed_when: result.stdout | int > 0
  loop_control:
    label: "{{ item.name }}"
  # NOTE: DO NOT use multiple with_items as order matters!
  with_items: "{{ user_dirs_filtered }}"

- name: Relocating User Shell Folders
  xwin_shell_folder:
    guid: "{{ item.windows_guid }}"
    path: "%USERPROFILE%\\{{ item.name }}"
    move_files: true
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('windows_guid', 'defined') }}"
  tags: debug

- name: Adding desktop.ini
  xwin_desktop_ini:
    path: "{{ my_user.userprofile }}\\{{ item.name }}"
    icon: "{{ item.windows_icon }}"
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('windows_icon', 'defined') }}"
  tags: debug

# TODO: Move various garbage like 'My Documents', 'Favorites', etc. to one
# directory... 
# NOTE: NOT using dirs.yml here as this is specific to Windows only.

# TODO: Google Drive symlinks

- name: Deleting Unwanted Directories
  win_file:
    path: "{{ my_user.userprofile }}\\{{ item }}"
    state: absent
  # NOTE: Some directories might be protected by Windows, skip those.
  ignore_errors: true
  with_items:
    - "Pictures"
    - "Saved Games"   # ???
    - "Searches"      # ???
    - "Downloads"
    - "Contacts"      # ???
    - "Favorites"     # ???
    - "Links"         # ???
    - "OneDrive"
    - "ansel"         # Nvidia
    - "source"        # Visual Studio
    #- "Creative Cloud Files"
