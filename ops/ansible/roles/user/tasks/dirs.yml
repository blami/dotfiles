---
# Create or link user directories

# User directories

- name: Symlinking Windows User Directories To WSL
  shell:
    cmd: |
      umask {{ my_user.umask }}
      ln -s "{{ my_facts.wsl_userprofile_dir }}/{{ item.name }}" "{{ my_user.home }}/{{ item.name }}"
    creates: "{{ my_user.home }}/{{ item.name }}"
  loop_control:
    label: "{{ item.name }}"
  with_items: "{{ user_dirs | selectattr('link', 'defined') | selectattr('link', 'equalto', 'wsl') }}"
  when:
    - my_facts.is_wsl
    - not my_facts.wsl_home_is_userprofile

- set_fact:
  # NOTE: Helper to filter directories and keep them in order
    user_dirs_filtered: "{{ user_dirs_filtered | default([]) + ([item] if ((('link' not in item) or (item['link'] != 'wsl')) and (('os' not in item) or (item['os'] == 'linux'))) else []) }}"
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ user_dirs }}"
- name: Creating User Directories
  shell:
    cmd: |
      # Check if any component of path is symlink
      IFS=/ read -ra name <<< "{{ item.name }}"
      has_link=false
      test_path="{{ my_user.home }}"
      for p in "${name[@]}"; do
        test_path="$test_path/$p"
        if [[ -L $test_path ]]; then
          has_link=true
          >&2 echo "$test_path is symlink, not creating {{ item.name }}"
          break
        fi
      done
      # Create directory
      changed=0
      if [ "$has_link" = false ] && [ ! -d "{{ my_user.home }}/{{ item.name }}" ]; then
        umask {{ my_user.umask }}
        mkdir "{{ my_user.home }}/{{ item.name }}"
        changed=1
      fi

      echo $changed
    executable: /usr/bin/bash
  register: result
  changed_when: result.stdout | int > 0
  loop_control:
    label: "{{ item.name }}"
  # NOTE: DO NOT use multiple with_items as order matters!
  with_items: "{{ user_dirs_filtered }}"

- name: Generating XDG ~/.config/user-dirs.dirs
  template:
    src: "{{ role_path }}/files/user-dirs.dirs.j2"
    dest: "{{ my_user.home }}/.config/user-dirs.dirs"

# WSL native directories

# Some WSL directories cannot be on NTFS (if that's where HOME is)
- name: Creating WSL Native Directories
  file:
    path: "{{ item.src }}"
    mode: "{{ item.mode }}"
    state: directory
  loop_control:
    label: "{{ item.src }}"
  with_items: "{{ wsl_native_dirs }}"
  when:
    - my_facts.is_wsl
    - my_facts.wsl_home_is_userprofile

- name: Symlinking WSL Directories to NTFS
  file:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    state: link
    # NOTE: This will delete (unlink) the original file if its not a symlink and
    # create the symlink. This should not be problem as all are transient.
    force: true
  loop_control:
    label: "{{ item.dest }}"
  with_items: "{{ wsl_native_dirs }}"
  when:
    - my_facts.is_wsl
    - my_facts.wsl_home_is_userprofile

