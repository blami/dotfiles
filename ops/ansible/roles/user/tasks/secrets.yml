---
# Fetch secrets from Bitwarden
# NOTE: Depends on gpg installed

# SSH keys
# NOTE: .ssh and its subdirectories are part of dotfiles checkout
- name: "Setting Up SSH Directory Permissions"
  file:
    path: "{{ my_user.home }}/.ssh/{{ item }}"
    mode: "0700"
    state: directory
  with_items:
    - "keys"
    - "ctrl"
    - "agent"

- name: "Fetching SSH Keys"
  copy:
    dest: "{{ my_user.home }}/.ssh/keys/{{ item.0 + item.1 }}"
    mode: "{{ '0600' if item.1 == '' else '0644' }}"
    content: "{{ lookup('bitwarden', 'SSH ' + item.0, attachment=item.0 + item.1) | b64decode }}"
    force: true
  loop_control:
    label: "{{ item.0 }}: {{ item.0 + item.1 }}"
  with_nested:
    - "{{ ssh_keys }}"
    - ["", ".pub"]

# IRC Client Certificates
# NOTE: Weechat config directory is part of dotfiles checkout
- name: "Setting Up IRC Client Certificates Directory"
  file:
    path: "{{ my_user.home }}/.config/weechat/certs"
    mode: "0700"
    state: directory

- name: "Fetching IRC Client Certificates"
  copy:
    dest: "{{ my_user.home }}/.config/weechat/certs/{{ item.server + '_' + item.user + '.pem' }}"
    mode: "0600"
    content: "{{ lookup('bitwarden', 'IRC ' + item.server, attachment=item.server + '_' + item.user + '.pem') | b64decode }}"
  loop_control:
    label: "{{ item.user }}@{{ item.server }}"
  with_items: "{{ irc_certs }}"

# GPG Keys
# NOTE: If ~/.gnupg does not exist it will be created by this with right
# permissions.
- name: "Checking GPG Keys"
  command: >
    gpg --list-secret-keys {{ item }}
  register: out
  # NOTE: Fail when gpg command is not installed; unfortunately it returns 2
  # even if installed but key not found.
  failed_when: out.rc == 2 and out.stderr == ""
  changed_when: false
  with_items: "{{ gpg_keys }}"

- name: "Fetching GPG Keys"
  copy:
    dest: "{{ my_user.home }}/.gnupg/{{ item.0.item }}{{ item.1 }}.tmp"
    content: "{{ lookup('bitwarden', 'GPG ' + item.0.item, attachment=item.0.item + item.1) | b64decode }}"
  when: item.0.rc == 2
  loop_control:
    label: "{{ item.0.item }}{{ item.1 }}"
  with_nested:
    - "{{ out.results }}"
    - [".priv.asc", ".sub_priv.asc"]

- name: "Importing GPG Keys"
  shell: |
    for F in "{{ item.item }}.priv.asc.tmp" "{{ item.item }}.sub_priv.asc.tmp" ; do
      gpg \
        --batch \
        --yes \
        --pinentry-mode=loopback \
        --passphrase="{{ lookup('bitwarden', 'GPG ' + item.item, field='fields.Passphrase') }}" \
        --import "{{ my_user.home }}"/.gnupg/$F
     done
     # NOTE: Ansible breaks fd 0; workaround using command file
     echo "5\ny\n" > "{{ my_user.home }}/.gnupg/command.tmp"
     gpg \
       --command-file "{{ my_user.home }}/.gnupg/command.tmp" \
       --expert \
       --edit-key "{{ item.item }}" \
       trust
  when: item.rc == 2
  loop_control:
    label: "{{ item.item }}"
  with_items: "{{ out.results }}"

- name: "Cleaning Up GPG Keys"
  file:
    path: "{{ item }}"
    state: absent
  with_fileglob: "{{ my_user.home }}/.gnupg/*.tmp"


