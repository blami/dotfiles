---
# Configure WSL
# WARN: Depends on systemd and systemd-sysv

- name: "Installing Empty /etc/fstab"
  copy:
    content: ""
    dest: /etc/fstab
    owner: root
    group: root
    mode: 644
    force: false
  when:
    - my_facts.is_wsl

- name: "Converting /tmp To tmpfs"
  lineinfile:
    path: /etc/fstab
    regexp: "^tmpfs	/tmp	tmpfs	defaults	1 0$"
    line: "tmpfs	/tmp	tmpfs	defaults	1 0"
  register: out_wsl_tmpfs
  when:
    - my_facts.is_wsl

- name: "Installing wsl.conf"
  template:
    src: "{{ role_path }}/files/wsl.conf.j2"
    dest: "/etc/wsl.conf"
    owner: root
    group: root
    mode: 644
    force: true
  register: out_wsl_wslconf
  when:
    - my_facts.is_wsl

# NOTE: Instead of relying on WSL to do this properly we protect_binfmt in
# wsl.conf and install own WSLInterop.conf manually.
- name: "Installing WSLInterop.conf to binfmt.d"
  file:
    path: /etc/binfmt.d
    state: directory
- copy:
    src: "{{ role_path }}/files/binfmt.d/WSLInterop.conf"
    dest: /etc/binfmt.d/WSLInterop.conf
    owner: root
    group: root
    mode: 644
    force: true
  register: out_wsl_wslinterop
  when:
    - my_facts.is_wsl

# TODO: Put this in _common/tasks/wsl.yml
- block:
  # NOTE: Touch file for bootstrap.ps1 so it knows it should re-run Ansible
  - name: "Creating bootstrap.ps1 Re-Run Stamp"
    shell: |
      mkdir -p "{{ my_facts.wsl_userprofile_dir }}/.ansible"
      touch "{{ my_facts.wsl_userprofile_dir }}/.ansible/{{ my_facts.wsl_distro }}.retry"
    when:
      - my_facts.has_wsl_interop
      - my_facts.wsl_userprofile_dir
      - "bootstrapps1" in vars

  - name: "Shutting Down WSL for Changes To Take Effect"
    pause:
      seconds: 5

  - command: '{{ my_facts.wsl_windrive_dir }}/Windows/System32/wsl.exe --shutdown'
    when:
      - my_facts.has_wsl_interop
      - my_facts.wsl_windrive_dir

  - name: "Shutting Down WSL for Changes To Take Effect"
    pause:
      msg: >
        Ansible is unable to shut down WSL for changes to take effect because
        WSLInterop is not working. Run: wsl --shutdown in CMD or Powershell.
        DO NOT press any key now.
    failed_when: true
    when:
      - not my_facts.has_wsl_interop

  when:
    - my_facts.is_wsl
    - (out_wsl_tmpfs.changed or out_wsl_wslconf.changed or out_wsl_wslinterop.changed)

# BUG: Enabling systemd ruined interop in early systemd-able WSL releases
# because systemd-binfmt would override WSLInterop.
#- name: Enabling systemd-binfmt Unit
#  systemd:
#    name: systemd-binfmt
#    enabled: true
#    state: started
#  when:
#    - my_facts.is_wsl
#    - my_facts.has_systemd

- name: Installing WSL Scripts
  copy:
    src: "{{ role_path }}/files/{{ item }}"
    dest: "/usr/local/bin"
    owner: root
    group: root
    mode: 755
    force: true
  with_items:
    - wsl_clocksync
    - wsl_hosts
    - wsl_resolvconf
  when:
    - my_facts.is_wsl

#- name: Installing WSL systemd Units
#  copy:
#    src: "{{ role_path }}/files/systemd/{{ item }}"
#    dest: "/etc/systemd/system"
#    owner: root
#    group: root
#    mode: 644
#    force: true
#  with_items:
#    - wsl_hosts.service
#  when:
#    - my_facts.is_wsl

#- name: Enabling WSL systemd Units
#  systemd:
#    name: "{{ item }}"
#    daemon_reload: true
#    enabled: true
#    state: started
#  with_items:
#    - wsl_hosts.service
#  when:
#    - my_facts.has_systemd
#    - my_facts.is_wsl

# Unmask systemd-logind on WSL and set user session to linger; this will assure
# that /run/user/UID is owned by user even when not logging in through PAM (WSL
# does not use PAM).
- name: Unmasking systemd-logind
  systemd:
    name: systemd-logind
    masked: false
  when:
    - my_facts.is_wsl
    - my_facts.has_systemd

- name: Setting {{ my_user.username }} Session Linger
  shell: |
    loginctl show-user -p Linger {{ my_user.username }}
    loginctl enable-linger {{ my_user.username }}
  register: out_wsl_linger
  changed_when: out_wsl_linger.stdout == "no"
  when:
    - my_facts.is_wsl
    - my_facts.has_systemd
