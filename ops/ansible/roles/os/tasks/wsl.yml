---
# Configure WSL
# WARN: Depends on systemd and systemd-sysv

- name: "Installing Empty /etc/fstab"
  copy:
    content: ""
    dest: /etc/fstab
    owner: root
    group: root
    mode: 0644
    force: false
  when:
    - my_facts.is_wsl

- name: "Converting /tmp To tmpfs"
  lineinfile:
    path: /etc/fstab
    regexp: "^tmpfs	/tmp	tmpfs	defaults	1 0$"
    line: "tmpfs	/tmp	tmpfs	defaults	1 0"
  register: out_wsl_tmpfs
  when:
    - my_facts.is_wsl

- name: "Installing wsl.conf"
  template:
    src: "{{ role_path }}/files/wsl.conf.j2"
    dest: "/etc/wsl.conf"
    owner: root
    group: root
    mode: 0644
    force: true
  when:
    - my_facts.is_wsl
  notify:
    - "Create bootstrap.ps1 Re-Run Stamp File"
    - "Restart WSL"

# NOTE: Instead of relying on WSL to do this properly we protect_binfmt in
# wsl.conf and install own WSLInterop.conf manually.
- name: "Installing WSLInterop.conf to binfmt.d"
  file:
    path: /etc/binfmt.d
    state: directory
- copy:
    src: "{{ role_path }}/files/binfmt.d/WSLInterop.conf"
    dest: /etc/binfmt.d/WSLInterop.conf
    owner: root
    group: root
    mode: 0644
    force: true
  when:
    - my_facts.is_wsl
  notify:
    - "Create bootstrap.ps1 Re-Run Stamp File"
    - "Restart WSL"

# NOTE: This can be only done here as os role creates the user.
- name: "Setting {{ my_user.username }} As Default WSL User"
  shell: |
    OLD_UID=$({{ my_facts.wsl_powershell }} -Command "Write-Host (Get-ItemProperty HKCU:\Software\Microsoft\Windows\CurrentVersion\Lxss\*\ DistributionName | Where-Object -Property DistributionName -eq {{ my_facts.wsl_distro }} | Get-ItemProperty -Name DefaultUid -EA SilentlyContinue).DefaultUid")
    NEW_UID=$(id -ur {{ my_user.username }})
    if [ "$OLD_UID" != "$NEW_UID" ]; then
      {{ my_facts.wsl_powershell }} -Command "Get-ItemProperty HKCU:\Software\Microsoft\Windows\CurrentVersion\Lxss\*\ DistributionName | Where-Object -Property DistributionName -eq {{ my_facts.wsl_distro }} | Set-ItemProperty -Name DefaultUid -Value $NEW_UID"
      echo "changed"
    fi
  register: out
  changed_when:
    - out.stdout is match('changed')
  when:
    - my_facts.is_wsl
    - my_facts.wsl_powershell
    - my_facts.has_wsl_interop
  notify:
    - "Create bootstrap.ps1 Re-Run Stamp File"
    - "Restart WSL"

# NOTE: Run handlers right now, as at this point WSL needs restart; otherwise
# they would run _after_ all tasks in role.
- meta: flush_handlers

- name: "Enabling systemd-binfmt Unit"
  systemd:
    name: systemd-binfmt
    enabled: true
    state: started
  when:
    - my_facts.is_wsl
    - my_facts.has_systemd

# - name: "Installing WSL Scripts"
#   copy:
#     src: "{{ role_path }}/files/{{ item }}"
#     dest: "/usr/local/bin"
#     owner: root
#     group: root
#     mode: 0755
#     force: true
#   with_items:
#     - wsl_clocksync
#   when:
#     - my_facts.is_wsl
# 
#- name: Installing WSL systemd Units
#  copy:
#    src: "{{ role_path }}/files/systemd/{{ item }}"
#    dest: "/etc/systemd/system"
#    owner: root
#    group: root
#    mode: 0644
#    force: true
#  with_items:
#    - wsl_hosts.service
#  when:
#    - my_facts.is_wsl

#- name: Enabling WSL systemd Units
#  systemd:
#    name: "{{ item }}"
#    daemon_reload: true
#    enabled: true
#    state: started
#  with_items:
#    - wsl_hosts.service
#  when:
#    - my_facts.has_systemd
#    - my_facts.is_wsl

# Unmask systemd-logind on WSL and set user session to linger; this will assure
# that /run/user/UID is owned by user even when not logging in through PAM (WSL
# does not use PAM).
- name: "Unmasking systemd-logind"
  systemd:
    name: systemd-logind
    masked: false
  when:
    - my_facts.is_wsl
    - my_facts.has_systemd

- name: "Setting {{ my_user.username }} Session Linger"
  shell: |
    loginctl show-user -p Linger {{ my_user.username }}
    loginctl enable-linger {{ my_user.username }}
  register: out_wsl_linger
  changed_when: out_wsl_linger.stdout == "no"
  when:
    - my_facts.is_wsl
    - my_facts.has_systemd
