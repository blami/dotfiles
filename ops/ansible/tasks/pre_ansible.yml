---
# Setup Ansible.

# Linux
# NOTE: Cannot use block with ansible_facts.system in ("Linux",) because we
# also delegate task to localhost here.

# Create /var/cache/ansible for various downloads on controller node and
# managed node.
- name: "Creating /var/cache/ansible"
  file:
    path: "/var/cache/ansible"
    state: directory
    owner: root
    group: root
    mode: 0777
    recurse: true
  become: true
  become_user: "root"
  when:
    - "(item == 'localhost' and my_control_node_facts.has_become_root) or (item != 'localhost' and my_facts.has_become_root)"
    - "hostvars[item].ansible_facts.system in ('Linux', )"
  delegate_to: "{{ item }}"
  with_items:
    - "{{ ['localhost', inventory_hostname] | unique }}"

- name: "Checking /var/cache/ansible Exists"
  stat:
    path: "/var/cache/ansible"
  register: out
  when:
    - "hostvars[item].ansible_facts.system in ('Linux', )"
  delegate_to: "{{ item }}"
  with_items:
    - "{{ ['localhost', inventory_hostname] | unique }}"
# NOTE: Needs to be done twice to cover when localhost == inventory_hostname
- set_fact:
    my_control_node_cache_dir: "/var/cache/ansible"
  when:
    - "hostvars[item.item].ansible_facts.system in ('Linux', )"
    - item.item == 'localhost'
    - item.stat.exists
    - item.stat.mode == "0777"
  with_items: "{{ out.results }}"
  loop_control:
    label: "{{ item.item }}"
- set_fact:
    my_cache_dir: "/var/cache/ansible"
  when:
    - "hostvars[item.item].ansible_facts.system in ('Linux', )"
    - item.item == inventory_hostname
    - item.stat.exists
    - item.stat.mode == "0777"
  with_items: "{{ out.results }}"
  loop_control:
    label: "{{ item.item }}"

# NOTE: This is needed on Debian systems to gather package facts.
- name: "Installing python3-apt DEB Package"
  apt:
    pkg: "python3-apt"
    install_recommends: false
    state: latest
  when:
    - my_facts.has_become_root
    - ansible_facts.os_family == "Debian"


# Windows
# TODO
