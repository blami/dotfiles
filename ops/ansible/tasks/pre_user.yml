---
# Check user and become rights on target system and set my_facts.

# Linux
- block:
  - name: "Defaulting User Home to /home/{{ my_user.username }}"
    set_fact:
      my_user: >
        {{ my_user | xcombine({
          "home": "/home/" + my_user.username
        }) }}
    when:
      - not my_user.home

  # NOTE: Calling getent twice, once to popuplate ansible_facts.getent_passwd
  # and second time ansible_facts.getent_group as some roles might depend on
  # that (e.g. os/tasks/user.yml).
  - name: "Checking if User {{ my_user.username }} Exists"
    getent:
      database: "passwd"
      key: "{{ my_user.username }}"
    changed_when: false
    failed_when: false
  - getent:
      database: "group"
      split: ":"
  - set_fact:
      my_facts: >
        {{ my_facts | xcombine({
          "has_my_user": true if "getent_passwd" in vars and my_user.username in getent_passwd else false
        }) }}

  # TODO: Check if local account

  - name: "Checking Become {{ my_user.username }}"
    command:
      cmd: "/bin/true"
    become: true
    become_user: "{{ my_user.username }}"
    register: out
    changed_when: false
    ignore_errors: true
  - set_fact:
      my_facts: >
        {{ my_facts | xcombine({
          "has_become_my_user": false if ("failed" in out and out.failed) else true
        }) }}

  - name: "Checking Become root"
    command:
      cmd: "/bin/true"
    become: true
    become_user: "root"
    register: out
    changed_when: false
    ignore_errors: true
  - set_fact:
      my_facts: >
        {{ my_facts | xcombine({
          "has_become_root": false if ("failed" in out and out.failed) else true
        }) }}

  - name: "Checking Permissions"
    fail:
      msg: >
        Ansible has not enough permissions to continue. See README.md for details.
    when:
      - "(my_facts.has_my_user and not my_facts.has_become_my_user) or (not my_facts.has_my_user and not my_facts.has_become_root)"

  # NOTE: If not having enough permissions just update my_user with whatever
  # the current values are.
  - name: "Refreshing User Facts"
    set_fact: >
      my_user: >
        {{ my_user | xcombine({
          "home": ansible_facts.user_dir,
          "shell": ansible_facts.user_shell
        }) }}
    when:
      - "(my_facts.has_my_user and not my_facts.has_become_root)"

  when:
    - ansible_facts.system in ("Linux",)


# Windows
- block:
  - name: "Checking If Ansible is Local Administrator"
    win_whoami:
    register: out
    changed_when: false
    ignore_errors: true
  - set_fact:
      my_facts: >
        {{ my_facts | xcombine({
          "has_administrator": (out.groups | selectattr('account_name', 'contains', 'Administrators') | list | length) > 0,
        }) }}

  - name: "Defaulting User Home and/or Domain Username"
    set_fact:
      my_user: >
        {{ my_user | xcombine({
          "win_userprofile": "C:\\Users\\" + my_user.win_username if not my_user.win_userprofile else my_user.win_userprofile,
          "win_domain_username": "LOCALDOMAIN\\" + my_user.win_username if not my_user.win_domain_username else my_user.win_domain_username
        }) }}
    when:
      - not my_user.home or not my_user.win_domain_username

  - name: "Checking if User {{ my_user.win_domain_username }} Exists"
    win_user:
      name: "{{ my_user.win_domain_username }}"
    check_mode: true
    register: out
  - set_fact:
      my_facts: >
        {{ my_facts | xcombine({
          "has_my_user": false if ("failed" in out and out.failed) else true
        }) }}

  - name: "Checking Become {{ my_user.win_domain_username }}"
    win_shell: $true
    become: true
    become_user: "{{ my_user.win_domain_username }}"
    register: out
    changed_when: false
    ignore_errors: true
    when:
      - my_facts.has_my_user
  - set_fact:
      my_facts: >
        {{ my_facts | xcombine({
          "has_become_my_user": false if (not my_facts.has_my_user or ("failed" in out and out.failed)) else true
        }) }}

  # TODO: If it is WSL then refresh user facts?
  - name: "Gathering User Facts"
    win_whoami:
    register: out
    changed_when: false
    become: true
    become_user: "{{ my_user.win_domain_username }}"
    when:
      - my_facts.has_my_user
      - my_facts.has_become_my_user
  - set_fact:
      my_user: >
        {{ my_user | xcombine({
          "win_userprofile": ansible_facts.env.USERPROFILE,
        }) }}
    when:
      - my_facts.has_become_my_user

  when:
    - ansible_facts.os_family in ("Windows",)
