---
# WSL detection and checks

# NOTE: It is OK to use env lookups here as WSL runs locally.
- name: Detecting WSL
  set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "is_wsl": true if lookup("env", "WSL_DISTRO_NAME") else false,
      }) }}

- name: Gathering WSL Facts
  set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "wsl_version": 2 if lookup("env", "WSL_INTEROP") else 1,
        "wsl_distro": lookup("env", "WSL_DISTRO_NAME"),
        "wsl_hostname": "{}.local".format(ansible_hostname) if lookup("env", "WSL_INTEROP") else "localhost",
      }) }}
  when:
    - my_facts.is_wsl

# BUG: This is not correct and will blow on multi-install systems, but hey...
- name: Finding WSL Host WINDRIVE mount
  command: >
    awk '{if(match($1, /^drvfs.?$/) && !system("test -d \""$2"/Windows/System\"")) {print $2 ; exit }}' /proc/mounts
  register: out
  changed_when: false
  when:
    - my_facts.is_wsl
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "wsl_windrive_mount": out.stdout,
      }) }}
    powershell: "{{ out.stdout + '/Windows/System32/WindowsPowerShell/v1.0/powershell.exe' }}"
  when:
    - my_facts.is_wsl
    - out.stdout != ""

- name: Checking WSL Interop
  command: >
    {{ powershell }} -Command 'Write-Host OK'
  register: out
  changed_when: false
  ignore_errors: true
  when:
    - my_facts.is_wsl
    - powershell is defined
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "is_wsl": not out.failed,
        "wsl_interop": not out.failed,
      }) }}
  when:
    - my_facts.is_wsl

- name: Gathering WSL Windows Username
  shell: |
    {{ powershell }} -Command 'Write-Host $env:USERNAME'
  register: out
  changed_when: false
  when:
    - my_facts.is_wsl
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "wsl_win_user": out.stdout_lines[0],
      }) }}
  when:
    - my_facts.is_wsl

# wsl_unc_playbook_dir    - Windows UNC path to playbook itself
# wsl_unc_home_dir        - Windows UNC path to WSL (Linux) home directory
# wsl_unc_userprofile_dir - Windows UNC path to Windows home directory
# wsl_userprofile_dir     - Linux (/mnt/c...) path to Windows home directory
- name: Gathering WSL Paths
  shell: |
    wslpath -w {{ playbook_dir }}
    wslpath -w {{ my_user.home }}
    {{ powershell }} -Command 'Write-Host $env:USERPROFILE'
    wslpath -u $({{ powershell }} -Command 'Write-Host $env:USERPROFILE')
  register: out
  changed_when: false
  when:
    - my_facts.is_wsl
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "wsl_unc_playbook_dir": out.stdout_lines[0],
        "wsl_unc_home_dir": out.stdout_lines[1],
        "wsl_unc_userprofile_dir": out.stdout_lines[2],
        "wsl_userprofile_dir": out.stdout_lines[3],
      }) }}
  when:
    - my_facts.is_wsl

- name: Checking If $HOME Is %USERPROFILE%
  set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "wsl_home_is_userprofile": true if my_facts.wsl_unc_home_dir == my_facts.wsl_unc_userprofile_dir else false
      }) }}
  when:
    - my_facts.is_wsl

# NOTE: Windows host IP is same as DNS server used inside WSL
- name: Gathering Windows Host IP
  slurp:
    src: /mnt/wsl/resolv.conf
  register: out
  when:
    - my_facts.is_wsl
    - my_facts.wsl_version == 2  
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "wsl_hostip": "127.0.0.1" if my_facts.wsl_version == 1 else out['content'] | b64decode | regex_findall('nameserver\s+(.+)$') | first 
      }) }}
  when:
    - my_facts.is_wsl


