---
# Linux checks

# NOTE: DO NOT use env lookups here as they run on controller and not the host itself.

# Permissions checks

# If playbook was run with -e user=USER for e.g. work environment, fix my_user
# for further tests.
- name: Detecting User Override with -e user=
  set_fact:
    my_user: >
      {{ my_user | xcombine({
        "username": user,
        "home": "/home/{{ user }}",
      }) }}
  when:
    - "'user' in vars"

- name: Checking User {{ my_user.username }} Exists
  getent:
    database: passwd
    key: "{{ my_user.username }}"
  failed_when: false
  changed_when: false
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "has_my_user": true if "getent_passwd" in vars and my_user.username in getent_passwd else false
      }) }}

# NOTE: This is clunky but sufficient in most cases
- name: Checking If System Uses LDAP
  lineinfile:
    path: /etc/nsswitch.conf
    regexp: "^passwd.*ldap"
    # NOTE: Since using check_mode this will not change anything but set out.found if line is present
    state: absent
  check_mode: true
  failed_when: false
  changed_when: false
  register: out
  tags: debug
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "has_ldap": true if out.found else false
      }) }}

- name: Checking User {{ my_user.username }} Is LDAP Account
  getent:
    database: passwd
    service: ldap
    key: "{{ my_user.username }}"
  failed_when: false
  changed_when: false
  when:
    - my_facts.has_ldap
    - my_facts.has_my_user
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "is_ldap_my_user": false if not my_facts.has_ldap else true if "getent_passwd" in vars and my_user.username in getent_passwd else false
      }) }}

- name: Checking LDAP User Account
  fail:
    msg: >
      LDAP account for user '{{ my_user.username }}' does not exist.
      
      System is set to use LDAP but user '{{ my_user.username }}' does not
      exist in LDAP. Ansible cannot proceed with this playbook as it later
      attempts to create user but cannot do it in LDAP.
     
      If you wish to run this playbook with different username than
      '{{ my_user.username }}' rather than creating that user; run playbook
      with '-e user=USERNAME' argument.
  when:
    - "(not my_facts.has_my_user and my_facts.has_ldap)"

- name: Checking Become root
  command:
    cmd: "/bin/true"
  become: true
  become_user: "root"
  register: out
  failed_when: false
  changed_when: false
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "has_become_root": out.rc == 0
      }) }}

- name: Checking Become {{ my_user.username }}
  command:
    cmd: "/bin/true"
  become: true
  become_user: "{{ my_user.username }}"
  register: out
  failed_when: false
  changed_when: false
  when:
    - my_facts.has_my_user
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "has_become_my_user": true if my_facts.has_my_user and out.rc == 0 else false
      }) }}
  # NOTE: no when: here since we want false even if user does not exists and
  # thus check was skipped. Ansible (Python) won't evaluate and condition if
  # my_facts.has_my_user is False.

# Check if makes sense to continue with current user and permissions
- name: Checking Ansible Permissions
  fail:
    msg: >
      Ansible has not enough permissions to continue this playbook.

      At least user '{{ my_user.username }}' MUST exist or Ansible needs
      privileges to become 'root' (see -K). If you wish to run this playbook
      with different username than '{{ my_user.username }}' rather than
      creating that user; run playbook with '-e user=USERNAME' argument.
  when:
    - "(not my_facts.has_become_root and not my_facts.has_my_user) or (my_facts.has_my_user and not my_facts.has_become_my_user)"

# If we have no power to change aspects of user simply read them into my_user.
- name: Gathering User Facts
  set_fact:
    my_user: >
      {{ my_user | xcombine({
        "home": ansible_facts.user_dir,
        "shell": ansible_facts.user_shell,
      }) }}
  when:
    - not my_facts.has_become_root

- name: Gathering Groups
  getent:
    database: group
    split: ":"

- name: Gathering Installed Packages
  package_facts:
    manager: auto

- name: Checking systemd
  command:
    cmd: "/bin/systemctl"
  register: out
  failed_when: false
  changed_when: false
- set_fact:
    my_facts: >
      {{ my_facts | xcombine({
        "has_systemd": false if out.rc != 0 else true
      }) }}

# TODO: This is quite naive approach; find something better?
#- name: Gathering Desktop Environment Facts
#  set_fact:
#    my_facts: >
#      {{ my_facts | xcombine({
#        "is_desktop": true if 'ubuntu-desktop' in packages else false,
#      }) }}
