---
# Configure Visual Studio

# NOTE: This DOES NOT install Visual Studio! It only makes various
# configuration changes on computer with already installed Visual Studio.

# - name: Finding Visual Studio installations
#   win_shell: |
#     $objs = @()
#     foreach($i in (Get-CimInstance MSFT_VSInstance -ErrorAction Ignore)) {
#       $obj = $i | Select-Object -Property `
#         Version, `
#         IdentifyingNumber, `
#         InstallLocation, `
#         Caption
#       # Cut version parts beyond minor as m
#       $obj.Version = $obj.Version -replace '^(\d+\.\d+).*$','$1'
#       $objs += ,$obj
#     }
#     ConvertTo-Json $objs
#   register: out
#   failed_when: false
#   changed_when: false
# - set_fact:
#     msvs: "{{ (out.stdout | from_json) if out.rc == 0 else [] }}"

# Find all existing configurations of Visual Studio
# NOTE: Configurations are created when VS is installed and/or run for the
# first time. Can't just simply use version_identifyingno because these move
# while configurations do not.
- name: Finding Visual Studio configurations
  win_shell: |
    $cfgs = @()
    foreach ($i in (Get-Item HKCU:\Software\Microsoft\VisualStudio\* -ErrorAction Ignore | Where-Object { $_.Name -match '\d+.\d+[_.*]?' })) {
      $p = "{{ my_user.home }}\AppData\Local\Microsoft\VisualStudio\$($i.PSChildName)"
      if (Test-Path $p) { $cfgs += ,$i.PSChildName}
    }
    ConvertTo-Json $cfgs
  register: out
  failed_when: false
  changed_when: false
- set_fact:
    msvs_facts: >
      {{
        msvs_facts | default({})
        | combine ({
          "configs": (out.stdout | from_json) if out.rc == 0 else []
          })
      }}

# NOTE: From here everything has to use with_nested with msvs so that settings
# are applied to all instances of MSVS installed.

- name: Changing Visual Studio default paths
  win_regedit:
    hive: "{{ my_user.home }}\\AppData\\Local\\Microsoft\\VisualStudio\\{{ item[0] }}\\privateregistry.bin"
    path: "HKLM:\\ANSIBLE\\Software\\Microsoft\\VisualStudio\\{{ item[0] }}"
    name: "{{ item[1].keys() | first }}"
    data: "{{ item[1].values() | first }}"
    type: "expandstring"
  loop_control:
    label: "{{ item[0] }} - {{ item[1].keys() | first }}"
  with_nested:
    - "{{ msvs_facts.configs }}"
    - - { VisualStudioProjectsLocation: "%USERPROFILE%\\src" }
      - { DefaultFileOpenLocation: "%USERPROFILE%\\src" }
      - { DefaultNewProjectLocation: "%USERPROFILE%\\src\\" }
      - { DefaultNewProjItemLocation: "%USERPROFILE%\\src" }
      - { DefaultOpenProjectLocation: "%USERPROFILE%\\src\\" }
      - { DefaultOpenProjItemLocation: "%USERPROFILE%\\src" }
      - { DefaultOpenSolutionLocation: "%USERPROFILE%\\src" }
  when:
    - msvs_facts.configs | length > 0

- name: Changing Visual Studio New Project dialog default path
  win_regedit:
    hive: "{{ my_user.home }}\\AppData\\Local\\Microsoft\\VisualStudio\\{{ item }}\\privateregistry.bin"
    path: "HKLM:\\ANSIBLE\\Software\\Microsoft\\VisualStudio\\{{ item }}\\NewProjectDialog\\MRUSettingsLocalProjectLocationEntries"
    name: "Value0"
    data: "{{ my_user.home }}\\src"
    type: "string"
  loop_control:
    label: "{{ item }}"
  with_items: "{{ msvs_facts.configs }}"
  when:
    - msvs_facts.configs | length > 0
