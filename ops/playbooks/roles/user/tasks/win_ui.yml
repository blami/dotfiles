---
# Setup Windows UI aspects

# Install system cursors
# NOTE: This checks if SCHEME_NAME is installed in registry and if not it
# attempts to install it from INF. Check is very opinionated and works with MY
# own cursor scheme INFs.
- name: Installing Windows system cursors
  win_shell: |
    $changed = 0
    switch -regex -file "{{ my_user.home }}\\.local\\share\\icons\\{{ item }}" {
      '^\s*SCHEME_NAME\s*=\s*"?([^"]*)"?$' { $scheme = $matches[1] }
    }
    if (-not(Get-ItemProperty "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Control Panel\\Cursors\\Schemes" $scheme -ErrorAction SilentlyContinue)) {
      rundll32.exe advpack.dll,LaunchINFSectionEx "{{ my_user.home }}\\.local\\share\\icons\\{{ item }},,,4"
      $changed = 1
    }
    Write-Host $changed
  register: result
  changed_when: result.stdout | int > 0
  with_items:
    - aero_black\cursors\install.inf
    - aero_black\cursors\install_l.inf
    - aero_black\cursors\install_xl.inf
  when:
    - my_facts.is_administrator
    - my_facts.has_dotfiles

# Install local fonts for current user
- name: Installing Windows local fonts
  win_shell: |
    $changed = 0
    $fonts = Get-ChildItem -Path "C:\\Users\\blami\\.local\\share\\fonts" -Recurse -Include *.ttf,*.otf
    $shell = New-Object -ComObject shell.application
    foreach ($f in $fonts) {
      # Figure out font name
      $folder = $shell.Namespace($f.DirectoryName)
      $item = $folder.Items().Item($f.Name)
      $name = $folder.GetDetailsOf($item, 21)
      switch ($f.Extension) {
        ".ttf" { $name = "$name (TrueType)" }
        ".otf" { $name = "$name (OpenType)" }
      }
      $dest = "$($Env:LocalAppData)\\Microsoft\\Windows\\Fonts\\$($f.Name)"
      $reg = "HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Fonts"
      if ((Test-Path $dest) -and (Get-ItemProperty `
        -Name $name `
        -Path $reg `
        -ErrorAction SilentlyContinue)) {
        continue
      }
      Copy-Item -Path $f.FullName -Destination $dest -Force
      if (-not(Test-Path $reg)) { New-Item -Path $reg -Force | Out-Null }
      New-ItemProperty `
        -Name $name `
        -Path $reg `
        -Value $dest `
        -PropertyType string -Force | Out-Null
      $changed += 1
    }
    Write-Host $changed
  register: result
  changed_when: result.stdout | int > 0
  when:
    - my_facts.has_dotfiles
