---
# Pre-play tasks. Mostly gathering additional facts into my_facts.* and
# my_user.* as well as couple of sanity checks (e.g. variables necessary for
# play being defined, etc.

# NOTE: This overrides my_user.username, not sure if that is ok; maybe rework
# for linux too as I almost always create Ubuntu user during install?
- name: Gathering user facts
  win_whoami:
  register: out
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "is_administrator": (out.groups | selectattr('account_name', 'contains', 'Administrators') | list | length) > 0,
          "is_msaccount": (out.groups | selectattr('domain_name', 'contains', 'MicrosoftAccount') | list | length) > 0
          })
      }}
# NOTE: This needs to be done in 2 steps as below depends on is_msaccount.
- set_fact:
    my_user: >
      {{
        my_user | default({})
        | combine({
          "username": out.account.account_name,
          "home": ansible_facts.env.USERPROFILE,
          "msaccount": None if not my_facts.is_msaccount else (out.groups | selectattr('domain_name', 'contains', 'MicrosoftAccount') | first).account_name
          })
      }}

- name: Checking if Ansible can become System
  win_shell: "$true"
  become: yes
  become_user: System
  become_method: runas
  register: out
  # Never failed nor changed
  failed_when: false
  changed_when: false
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "can_become_system": true if out.rc == 0 else false
          })
      }}

# NOTE: This is quite weak but working way to test dotfiles checkout without
# Git installed.
- name: Checking if dotfiles are in ~
  win_stat:
    path: "{{ my_user.home }}\\.dfgit"
  register: out
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "has_dotfiles": out.stat.exists
          })
      }}
