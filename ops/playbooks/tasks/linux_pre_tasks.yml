---
# Pre-play tasks for Linux to gather additional facts into my_facts.* and
# my_user.* / can_become.* which are used later to decide which tasks
# requiring root should be skipped.

# Gather installed packages list to ansible_facts.packages
- name: "Gathering installed packages"
  package_facts:
    manager: auto

# Check if Ansible can become root; gather my_facts.can_become_root bool.
- name: "Checking if Ansible can become root"
  command: "/bin/true"
  become: true
  become_user: "root"
  register: out
  # Never failed nor changed
  failed_when: false
  changed_when: false
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "can_become_root": true if out.rc == 0 else false
        })
      }}

# Check if my_user exists; gather my_facts.user_exists bool. If user exists
# also check if can become that user and gather my_facts.can_become_user.
- name: "Checking if user {{ my_user.username }} exists"
  getent:
    database: passwd
    key: "{{ my_user.username }}"
  # Never failed nor changed
  failed_when: false
  changed_when: false
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
            "user_exists": true if "getent_passwd" in vars and my_user.username in getent_passwd else false
          })
      }}
    # Gather my_user.umask that should be set for any files created in ~.
    # This is based on uid == gid; uid >= 1000 and defaults to 022.
    my_user: >
      {{
        my_user | default({})
        | combine({
          "umask": "022" if "getent_passwd" not in vars or my_user.username not in getent_passwd else ("002" if (getent_passwd[my_user.username][1] | int) >= 1000 and getent_passwd[my_user.username][1] == getent_passwd[my_user.username][2] else "022")
          })
      }}

- name: "Checking if Ansible can become {{ my_user.username }}"
  command: "/bin/true"
  become: true
  become_user: "{{ my_user.username }}"
  register: out
  # Never failed nor changed
  failed_when: false
  changed_when: false
  when:
    - my_facts.user_exists
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "can_become_user": true if my_facts.user_exists and out.rc == 0 else false
        })
      }}

# Check if Ansible can become target user; or if target user doesn't exist it
# can become root to create it. Warn user to doublecheck on my_user.username.
- name: "Checking if Ansible has enough become permissions"
  fail:
    msg: >
      Ansible cannot become {{ my_user.username }}. If that user does not exist
      Ansible also cannot become root to create it. Make sure
      'my_user.username' is set correctly in order to do this play.
  when: 
    - not my_facts.user_exists and not my_facts.can_become_root
    - not my_facts.can_become_user

# If user exists set my_user.home. Otherwise keep it (and it will be created).
- name: "Gathering user home directory fact"
  shell: |
    getent passwd {{ my_user.username }} | awk -F: '{ print $6 }'
  register: out
  changed_when: false
  when:
    - my_facts.user_exists
- set_fact:
    my_user: >
      {{
        my_user | default({})
        | combine({
          "home": out.stdout
        })
      }}
  # NOTE If user doesn't exist we don't want to overwrite default home
  when:
    - my_facts.user_exists

# Check if my_user.home is on drvfs if so, we can't create certain directories.
- name: "Checking if user home directory is on drvfs"
  shell: |
    df -P {{ my_user.home }} | awk 'FNR==2 {print $1}'
  register: out
  changed_when: false
  when:
    - my_facts.user_exists
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "home_filesystem": out.stdout
        })
      }}
  when:
     - my_facts.user_exists

# Check if user SSH key exists.
- name: "Checking user SSH key presence"
  stat:
    path: "{{ my_user.home }}/.ssh/{{ my_user.ssh_key }}"
  register: out
  when:
    - my_facts.user_exists
- set_fact:
    my_facts: >
      {{
        my_facts | default({})
        | combine({
          "has_ssh_key": out.stat.exists
        })
      }}
  when:
    - my_facts.user_exists
