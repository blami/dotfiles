#!/usr/bin/zsh
# ~/.zsh/funcs/colortheme - Change terminal colors using escape sequences

# Usage: colortheme [/path/to/theme [variant]]

# Environmental variables:
COLORTHEME=                         # Path to colortheme file last read
COLORTHEME_VARIANTS=()              # All variants in file, 0 is set one


# {{{ Utility Functions
_colortheme_fg () {
    # Return contrast fg color for given bg color $1

    # 16 ANSI colors (black except white for black)
    if (( $1 < 16 )); then (( $1 == 0 )) \
        && printf 15 || printf 0; return; fi
    # Greyscale (black 232-243, then white)
    if (( $1 > 231 )); then (( $1 < 244 )) \
        && printf 15 || printf 0; return; fi
    # 6x6x6 color cube
    local g=$(( (($1 - 16) % 36 ) / 6 ))
    (( g > 2 )) && printf 0 || printf 15
}

_colortheme_print () {
    # Print text $3 using fg color $1 on bg color $2
    printf "\e[48;5;%sm\e[38;5;%sm%s\e[0m" $2 $1 $3
}

_colortheme_printrow () {
    # Print a row of color boxes begining with color $1 and ending with $2
    local i
    for (( i = $1; i <= $2; i++ )) do
        _colortheme_print $(_colortheme_fg $i) $i "$(printf "%3d" $i)"
        (( i < $2 )) && printf " "
    done;
    [ ! -z "$3" ] && printf $3
}

_colortheme_test () {
    # Print test patterns of colortheme
    local i j k

    # ANSI 16 Colors
    echo "ANSI 16 Colors"
    _colortheme_printrow 0 7 "\n"                       # Dark colors
    _colortheme_printrow 8 15 "\n"                      # Light colors

    # 6x6x6 Color cube
    echo "\n6x6x6 Color Cube"
    for (( i = 16; i <= 231; i += 2 * 36 )) do
        for (( j = 0; j < 6; j++ )) do
            for (( k = 0; k < 3 ; k++ )) do
                _colortheme_printrow $(( i + (k*36) )) $(( i + (k*36) + 5 ))
                (( k < 2 )) && printf "     "
            done
            (( i += 6 ))
            printf "\n"
        done
        (( i != 160 )) && printf "\n"
    done

    # Grayscale
    echo "\nGrayscale"
    _colortheme_printrow 232 243 "\n"                   # Dark gray
    _colortheme_printrow 244 255 "\n"                   # Light gray

    # Terminal Test Pattern
    # NOTE For terminal test pattern usual ESCapes are used rather than print
    echo "\nTerminal Test Pattern"
    # NOTE 39 and 49 are default colors
    printf "        49m 40m 41m 42m 43m 44m 45m 46m 47m\n"
    for i in 39 30 31 32 33 34 35 36 37; do             # Foreground colors
        for j in 0 1; do
            printf "%1s;%2sm   " $j $i
            for k in 49 40 41 42 43 44 45 46 47; do     # Background colors
                printf "\e[%d;%d;%dm%3s\e[0m " $j $i $k " tT"
            done
            printf "\n"
        done
    done
}
# }}}

colortheme () {
    # TODO Add support for screen/tmux and disable linux, vt100 and vt220
    # TODO When invoke`d without parameters print test pattern

    if [ $# -lt 1 ]; then
        _colortheme_test
        return
    fi
    if [ ! -r $1 ]; then
        (>&2 echo "error: unable to read colortheme file $1")
        return 1
    fi

    COLORTHEME=$1
    COLORTHEME_VARIANTS=()

    # NOTE If variant is not provided first found will be used
    local use_variant=$2
    local variant key color unused
    while read -r variant key color unused; do
        # Skip commented out and empty lines
        [ -z "$variant" ] || [ "${variant:0:1}" = "#" ] && continue
        if [ -z "$key" ] || [ -z "$color" ]; then
            (>&2 echo "error: invalid record: '$variant...', skipping")
            continue
        fi

        # Use first found variant if use_variant empty
        [ -z $use_variant ] && use_variant=$variant
        # Make sure used variant is index 0 in COLORTHEME_VARIANTS list
        [ ${#COLORTHEME_VARIANTS[@]} -eq 0 ] \
            && COLORTHEME_VARIANTS+=($use_variant)

        # Store any new found variant to list of all variants for theme
        (( ${COLORTHEME_VARIANTS[(I)$variant]} )) \
            || COLORTHEME_VARIANTS+=($variant)

        if [ "$variant" = "$use_variant" ]; then
            # TODO Check $color against regex?
            if [[ "$key" =~ "^(fg|bg|c|[0-9]|1?[1-9][0-9]|2[0-4][0-9]|25[0-5])$" ]]; then
                case "$key" in
                    "fg")   printf "\e]10;$color\e\\"       ;;
                    "bg")   printf "\e]11;$color\e\\"       ;;
                    "c")    printf "\e]12;$color\e\\"       ;;
                    *)      printf "\e]4;$key;$color\e\\"   ;;
                esac
            else
                (>&2 echo "error: invalid key '$key', skipping")
                continue
            fi
        fi
    done <$1
}

colortheme $@
