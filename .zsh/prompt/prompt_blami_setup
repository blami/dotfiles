# Created by blami <blami@blami.net>

# Prompt components explanation:
#
# .- 24h time
# |     .- date in format DD.MM
# |     | .- day of the week mtwhfsu (weekend is red)
# |     | |
# |     | |   .- username
# |     | |   |    .--- Kerberos ticket (if KRB5P is set to principal)
# |     | |   |    | .- @ (@> for SSH connection)
# |     | |   |    | |.- host (HOSTNICK if set)
# |     | |   |    | ||   .- host HOSTOK
# |     | |   |    | ||   |
# |     | |   |    | ||   |  .- environment (.env)
# |     | |   |    | ||   |  |     .- symlink
# |     | |   |    | ||   |  |     |  .- shortened path
# |     | |   |    | ||   |  |     |  |       .- vcs branch (red if dirty)
# v     v v   v    v vv   v  v     v  v       v
# 23:55 31w12 user[^]@host● [env:][@]~..di/r[ master]
# [255 ][&2 ][@]dir $ _                                                     i
# ^     ^    ^  ^   ^                                                       ^
# |     |    |  |   `- pound (EUID=0 is #)                                  |
# |     |    |  `- last path component                                      |
# |     |    `- symlink                                                     |
# |     `- background jobs                                                  |
# `- non-zero exit code                                            vi mode -'

zmodload -i zsh/datetime
autoload -Uz vcs_info
autoload -Uz cwdlast cwdellipse

# {{{ Vi-mode status
# NOTE: Need to set RPROMPT for zle-line-init (first prompt)
# TODO: Come up with something better for the entire rprompt?
RPROMPT="i"
function zle-line-init zle-keymap-select {
    case $KEYMAP in
        vicmd)
            RPROMPT="n"
            ;;
        viins|main)
            RPROMPT="i"
           ;;
    esac
    zle reset-prompt
    zle && zle -R
}
# NOTE This is already done in .zshrc
#export KEYTIMEOUT=1
# }}}


prompt_blami_precmd() {
    setopt localoptions noxtrace

    # TODO: Screen reader support

    #local C_DB="%F{8}

    # Background start/end
    local BGS=""
    local BGE=""
    if [ $EUID -eq 0 ]; then BGS="%K{1}"; BGE="%k"; fi

    # Color setup for outlines
    #local C_O=${prompt_blami_color0}
    [ $EUID -eq 0 ] && C_O=${prompt_blami_color1}

    # New-line
    local NL=$'\n'
    # Section begin, end and separator
    #local SB="%B%F{${C_O}}(%f%b"
    #local SE="%B%F{${C_O}})%f%b"
    #local SS="%B%F{${C_O}}-%f%b"

    #local SB="%K{1}%F{8}"
    #local SE="%f%k"

    PS1="${NL}"

    # Date
    # ----
    local dow="umtwhfs" ; dow=${dow:$(strftime %w $EPOCHSECONDS):1}
    case $dow in
        s|u) dow="${dow}" ;;
        *) dow="${dow}" ;;
    esac
    # TODO: Make delimiter . if alarm set?
    local dlm=':'
    PS1+="[%D{%H}${dlm}%D{%M} %D{%d}${dow}%D{%m} " #"

    # User and hostname
    # -----------------
    local host=${HOSTNICK:-$HOST}
    local title_host=$host
    if [ ! -z $SSH_CONNECTION ]; then
        host="@>${host}"
        title_host="@${title_host}"
    else
        host="@${host}"
    fi
    local host_ok=
    case $HOSTOK in
        1) host_ok="●" ;;
        *) host_ok="●" ;;
    esac
    local host_os="${OS:0:1:u}"
    local user="%n"
    # Kerberos ticket check
    (( $+commands[klist] )) && [ -n "$KRB5P" ] && {
        # NOTE: Read klist -l output from 3rd line and look for principal
        local IFS=$'\n' ; for l in $(klist -l 2>/dev/null | tail +3); do
            [[ "$l" =~ "^$KRB5P" && ! "$l" =~ "\(Expired\)$" ]] && user=$user^
        done
    }
    PS1+="${user}${host}${host_ok}] " #"

    # Working directory
    # -----------------
    # NOTE: This is applied below in "Working directory name" section too
    local cwd_ln=
    [ -L $PWD ] && cwd_ln="@"
    #local cwd_color=8
    #[ ! -w $PWD ] && cwd_color=11
    local cwd_name=$(cwdlast)

    # Handle prompt length better, this can still overlap
    if [ $COLUMNS -gt 80 ]; then
        # Environment (.env)
        local env=
        # Current working directory elipsized
        local cwd="${cwd_ln}$(cwdellipse)"

        # VCS
        local vcs=
        vcs_info; [ ! -z ${vcs_info_msg_0_} ] && vcs=" ${vcs_info_msg_0_}"

        PS1+="${env}${cwd}${vcs}"
    fi

    PS1+=${NL}

    # Return value
    # ------------
    PS1+="%(?..%K{1}%F{0}%?%f%k )"

    # Background jobs
    # ---------------
    PS1+="%1(j.&%j .)"

    # Working directory name
    # ----------------------
    PS1+="${cwd_ln}${cwd_name} "

    # Pound
    # -----
    PS1+="%0(#.#.$) "

    # Set sub-prompts
    # PS2 - secondary prompt (e.g. for loop)
    # PS3 - selection prompt
    # PS4 - execution trace prompt
    PS2="%_> "
    PS3="#? "
    PS4="%N %I+ "

    # Set window title
    case $TERM in
        *xterm*|*rxvt)
            print -Pn "\e]0;SH: [${title_host}] ${cwd_ln}${cwd_name}\a"
            ;;
    esac
}

prompt_blami_setup() {
    prompt_opts=(cr sp subst percent)

    # TODO: Handle merges, etc.
    # Set vcs_info style
    zstyle ':vcs_info:*' enable git
    zstyle ':vcs_info:*' use-simple true
    zstyle ':vcs_info:*' formats "% %b"

    # Show vim mode (RPROMPT) for zle
    if [ "$(cat /proc/$PPID/comm)" != "mc" ]; then
        zle -N zle-line-init
        zle -N zle-keymap-select
    fi

    # Re-evaluate prompt on precmd
    autoload -Uz add-zsh-hook
    add-zsh-hook precmd prompt_blami_precmd
}

prompt_blami_help() {
  cat <<EOH
EOH
}

prompt_blami_preview() {
    prompt_preview_theme blami "$@"
}

prompt_blami_setup "$@"

# vim:set ft=zsh:
