# ~/.tmux.conf - tmux configuration

# {{{ General
set -g default-terminal     "screen-256color"
set -g escape-time          10              # wait 10ms after escape
set -sg repeat-time         500             # 500ms repeat wait in C-a mode
setw -g xterm-keys          on              # xterm-style Fkeys (^,M-...)
setw -g mode-keys           vi              # use vi keybindings in copy mode

setw -qg utf8               on
set -qg status-utf8         on

set -g history-limit        8192            # scroll-back buffer

set -g display-panes-time   2000
set -g display-time         2000

set -g default-command      "$SHELL"        # run shell as non-login
# }}}


# {{{ Display
set -s focus-events         on              # send focus events to apps
set -g bell-action          any             # monitor any window
set -g monitor-activity     on              # monitor apps for activity
set -g visual-activity      off             # don't display activity messages

set -g base-index           1               # number windows from 1
setw -g pane-base-index     1               # number panes from 1
set -g renumber-windows     on              # renumber windows on close

set -g set-titles           on              # set xterm title
set -g set-titles-string    "TMUX: [#h:#S] #W"
setw -g automatic-rename    off             # don't auto-rename windows
setw -g allow-rename        on              # allow apps to rename using \e
# }}}


# {{{ Status and Panels
# Status
set -g status               on
set -g status-position      bottom
set -g status-interval      10              # re-draw status each minute

set -g window-status-format "#I:#{=5:window_name}#F"
set -g window-status-current-format "#[reverse]#I#D:#{=5:window_name}#F#[none]"
set -g window-status-activity-style ""
set -g window-status-bell-style ""

set -g status-left          "#{?session_many_attached,+,-} "
set -g status-right         " -- #(~/.tmux/status.sh) #S"

# Panels
# Draw borders using - and |
#set-option -ga terminal-overrides ',wsvt*:enacs=X:smacs@:rmacs@:acsc@'

#set -g pane-border-format   "#{?pane_active,#[fg=green],#[fg=white]} #I:#T|#{?pane_synchronized,=,-}#{?pane_in_mode,*,} "
#set -g pane-border-status   bottom
#set -g pane-border-style        "bg=default,fg=white"
#set -g pane-active-border-style "bg=default,fg=green"
# }}}


# {{{ Keybindings
# NOTE version specific commands are run via `run || true' to avoid conditions
# Set prefix to C-a (screen familiarity)
set -g prefix C-a
# This is to allow tmux nested in tmux receive the prefix
bind                    C-a         send-prefix
#bind                C-a         last-window

# Enable mouse
setw -g mouse on
#run -b 'tmux setw -g mode-mouse on 2>/dev/null || true' # tmux <=2.1
#run -b 'tmux setw -g mouse on 2>/dev/null || true' # tmux >2.1

# TODO GNU screen like bindings
# Sessions
bind                    s           command-prompt -p find-session 'switch-client -t %%'

# Windows
bind                    c           new-window
bind                    d           detach
bind                    k           confirm-before "kill-window"
bind                    A           command-prompt "rename-window %%"
bind                    Space       next-window

# Panels
bind                    |           split-window -h
bind                    _           split-window -v
bind                    =           set-option synchronize-panes

# Scrolling (Shift+PgUp/PgDn)
bind -n                 C-k         copy-mode -u
bind -n                 C-j         copy-mode
bind -T copy-mode-vi    C-k         send-keys -X page-up
bind -T copy-mode-vi    C-j         send-keys -X page-down
# Mouse scroll in shell only
bind -n                 WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n                 WheelDownPane select-pane -t= \; send-keys -M

# Misc
#bind    F1      command-prompt "split-window 'exec man %%'"
bind                    r           source-file ~/.tmux.conf \; display-message "Configuration reloaded from ~/.tmux.conf"
# }}}


# {{{ Hooks
# If ~/.tmux_<session>.conf exists source it.
set-hook -g after-new-session "run 'tmux source-file -q ~/.tmux/session_$(tmux display-message -p  #S).conf'"
# }}}


# Local configuration
if '[ -r ~/.tmux.conf_local ]' 'source-file ~/.tmux.conf_local'


# vim:set fo-=t:
