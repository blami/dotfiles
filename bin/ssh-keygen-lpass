#!/bin/bash
# ssh-keygen-lpass - generate keypair and upload it to LastPass

LPASS="${LPASS:-lpass}"
SSHKEYGEN="${SSHKEYGEN:-ssh-keygen}"

# Print help message
usage() {
    cat<<EOF
ssh-keygen-lpass - generate keypair and upload it to LastPass.
Usage: $(basename $0) KEYFILE [FOLDER]
Options:
  -t TYPE           type of key (default is "rsa")
  -b BITS           number of bits in key to create (default is "4096")
  -C COMMENT        key comment (default is empty)
  -N PASSPHRASE     new passphrase (default is empty)
  -P PASSPHRASE     old passphrase (only needed if KEYFILE already exists and
                    has passphrase set)
  -U                only upload existing KEYFILE to LastPass (requires -P if 
                    KEYFILE has passphrase set)
  -h                show this help message and exit

  KEYFILE           path to private key
  FOLDER            optional LastPass folder; SSH type note will be stored
                    under it as KEYFILE filename.

If given KEYFILE doesn't exist a new keypair will be generated and uploaded to
LastPass. If KEYFILE exists and correct passphrase is provided with -P then
passphrase will be changed and key re-uploaded. 

NOTE: This script requires LastPass to be logged in; if its not script will
fail to upload key. In such case use -U option to upload key without any
modifications.
EOF
}

TYPE=rsa
BITS=4096
COMMENT=
NEW_PASSPHRASE=
OLD_PASSPHRASE=
UPLOAD_ONLY=0 # Flag to denote key should be uploaded as-is

# Process command line arguments
while getopts "t:b:C:N:P:Uh" arg; do
    case $arg in
        t)      TYPE=$OPTARG ;;
        b)      BITS=$OPTARG ;;
        C)      COMMENT=$OPTARG ;;
        N)      NEW_PASSPHRASE=$OPTARG ;;
        P)      OLD_PASSPHRASE=$OPTARG ;;
        U)      UPLOAD_ONLY=1 ;;
        h)      usage ; exit 0 ;;
        ?)      usage ; exit 2 ;;
    esac
done
shift $(($OPTIND - 1))
if [ $# -lt 1 ]; then
    >2& echo "$0: not enough arguments"
    usage
    exit 2
fi

KEYFILE=$1
NAME="$(basename $KEYFILE)"
[ $# -eq 2 ] && NAME="$2/$NAME"

# Check if all tools are installed
for c in $LPASS $SSHKEYGEN; do
    if ! command -v $c &> /dev/null; then
        >2& echo "$0: $c is not installed"
        exit 3
    fi
done

# If keyfile doesn't exist generate a new keypair and upload it to LastPass
if [ ! -e $KEYFILE ]; then
    if [ $UPLOAD_ONLY -eq 1 ]; then
        >2& echo "$0: invalid use of -U; $KEYFILE doesn't exist"
        exit 1
    fi

    $SSHKEYGEN -q -t $TYPE -b $BITS -N "$NEW_PASSPHRASE" -C "$COMMENT" \
        -f $KEYFILE &>/dev/null
    if [ $? -ne 0 ]; then
        >&2 echo "$0: failed to generate keypair"
        exit 1
    fi

# If keyfile exists just change passphrase and upload to LastPass
else
    if [ $UPLOAD_ONLY -eq 0 ]; then
        $SSHKEYGEN -q -p -N "$NEW_PASSPHRASE" -P "$OLD_PASSPHRASE" \
            -f $KEYFILE &>/dev/null
        if [ $? -ne 0 ]; then
            >&2 echo "$0: failed to change $KEYFILE passphrase"
            exit 1
        fi
    else
        # We store $NEW_PASSPHRASE to LastPass
        NEW_PASSPHRASE="$OLD_PASSPHRASE"
    fi
fi

# Read info about keypair and keypair itself into variables
out=$($SSHKEYGEN -l -f $KEYFILE)
if [ $? -ne 0 ]; then
    >&2 echo "$0: failed to read keyfile $KEYFILE"
    exit 1
fi
regex="^([0-9]+).*\(([^)]+)\)$"
if [[ $out =~ $regex ]]; then
    TYPE=${BASH_REMATCH[2]} # NOT same as -t!
    BITS=${BASH_REMATCH[1]}
else
    >&2 echo "$0: unable to find $KEYFILE format and bits"
    exit 1
fi
PRIVKEY=$(<$KEYFILE)
PUBKEY=$($SSHKEYGEN -q -y -P "$NEW_PASSPHRASE" -f $KEYFILE)

# Create LastPass payload
PAYLOAD=$(cat <<EOF
Bit Strength: $BITS
Format: $TYPE
Passphrase: $NEW_PASSPHRASE
Private Key: $PRIVKEY
Public Key: $PUBKEY
EOF
)

# Upload key to LastPass (overwrite existing $NAME)
$LPASS show --quiet --sync now "$NAME" &>/dev/null
if [ $? -ne 0 ]; then
    echo "$PAYLOAD" | $LPASS add --non-interactive --sync now \
        --note-type ssh-key "$NAME" &>/dev/null
    if [ $? -ne 0 ]; then
        >&2 echo "$0: unable to upload; login to LastPass and retry with -U"
        exit 1
    fi
else
    echo "$PAYLOAD" | $LPASS edit --non-interactive --sync now "$NAME"
    if [ $? -ne 0 ]; then
        >&2 echo "$0: unable to upload; login to LastPass and retry with -U"
        exit 1
    fi
fi
exit 0
