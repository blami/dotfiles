#!/bin/bash
# Geolocate by external IP

# Output: COUNTRY or exit 1 in case of failure
# Arguments:
#   -c d|w|m        cache result for day, week or month
#   -d COUNTRY      default to COUNTRY in case of retrieval error
#
# NOTE: This is mostly for use in my other scripts such as SSH jumps or VPNs
# and its not particularly user or debug friendly. 

command -v curl >/dev/null 2>&1 || exit 1

http_request() {
    RESP=$(curl -sL -H "$2" -w "\n%{response_code}" "$1") || return 1
    CODE=$(tail -n1 <<< "$RESP")
    if [ "$CODE" -lt 200 ] || [ "$CODE" -gt 299 ]; then
        return 1
    fi
    sed '$ d' <<< "$RESP"
    return 0
}

CACHE_EXP=
DEFAULT=
while getopts "c:d:" OPT; do
    case "$OPT" in
    c)
        case "$OPTARG" in
        d)  CACHE_EXP=0 ;;
        w)  CACHE_EXP=1 ;;
        m)  CACHE_EXP=2 ;;
        *)
            >&2 echo "$(basename "$0"): -c takes only d,w or m"
            exit 1
        esac ;;
    d)
        DEFAULT=$OPTARG ;;
    \?)
        exit 1 ;;
    esac
done; shift $((OPTIND-1))

# Cache
# NOTE: Can't rely on mtime as some systems don't update it
# CUR_DATE is array in format: "DoY WoY MoY"
IFS=" " read -ra CUR_DATE <<<"$(date +'%j %U %m')"
CACHE=${XDG_CACHE_HOME:-~/.cache}/whereami
[ ! -d "$(dirname "$CACHE")" ] && mkdir -p "$(dirname "$CACHE")"
if [ -r "$CACHE" ] && [ -n "$CACHE_EXP" ] ; then
    OUT=$(head -1 "$CACHE")
    IFS=" " read -ra CACHE_DATE <<<"$(tail -1 "$CACHE")"
    if [ "${CUR_DATE[$CACHE_EXP]}" -eq "${CACHE_DATE[$CACHE_EXP]}" ]; then
        echo "$OUT"
        exit 0
    fi
fi

# Get current country code from ifconfig.io
OUT=$(http_request "https://ifconfig.io/country_code") || [ -n "$DEFAULT" ] || exit 12
OUT=${OUT:-$DEFAULT}
[ -z "$OUT" ] && exit 13

# Write to cache and output
cat >"$CACHE" <<EOF
$OUT
${CUR_DATE[*]}
EOF
echo "$OUT"
